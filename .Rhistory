names(links) <- c("from", "to", "weight")
nodes <- data.frame(
id = c(1:length(state_name)),
etat = state_name
)
p2 <- plot_trans(links, nodes, emiss)
print(p2)
id <- unique(result$data$id)
p <- list()
nb_indiv <- ifelse(length(id) >= 4, 4, length(id))
for (i in 1:nb_indiv) {
ath <- id[i]
p[[i]] <- grid.arrange(
plot_workload(ath, result$data),
plot_state(ath, result$data, n_states)
)
}
#' @import ggplot2
#' @import gridExtra
#' @import reshape2
#' @import stats
#' @import data.table
#' @import igraph
#'
#' @return une liste avec pleins de choses super dedans
#' @export
#' @examples NULL
mils <- function(data, n_obs = 2, n_states = 3, family = "gaussian", init = FALSE, state_name = NULL) {
colnames(data) <- c("id", "date", "load")
# Default state names
if (is.null(state_name)) {
state_name <- paste0("S", 1:n_states)
}
# ---- Data Preprocessing ---- #
data <- add_missing_days(data)
data <- data %>%
mutate(
id = as.character(id),
date = as.Date(date),
load = as.numeric(load)
) %>%
group_by(id, date) %>%
summarise(load = sum(load, na.rm = TRUE), .groups = "keep") %>%
ungroup() %>%
mutate(load = ifelse(load == 0, NA, load)) %>%
arrange(id, date) %>%
mutate(index = row_number()) %>%
relocate(index)
# ---- Feature Initialization ---- #
date <- Day$new()
date$get_data(data)
load <- Load$new()
load$get_data(data)
load$process()
list_features <- list(date, load)
df <- pipeline(list_features)
# Remove athletes with insufficient data
n <- df %>% group_by(id) %>% count()
ath <- n %>% dplyr::filter(n <= n_obs)
if (nrow(ath) > 0) {
df <- df %>% dplyr::filter(!id %in% ath$id)
}
# ---- Model Setup ---- #
n <- df %>% group_by(id) %>% count()
n_times <- n$n
states <- paste0("S", 1:n_states)
set.seed(1)
mod <- depmix(
response = list(load_scaled ~ 1),
data = df,
nstates = n_states,
family = list(get(family)()),
ntimes = n_times
)
if (init) {
mod <- setpars(mod, values = getpars(graal))
}
model <- fit(mod, emc = em.control(maxit = 2000))
print(model)
# ---- Results Extraction ---- #
result <- list()
para <- getpars(model)
result$init <- para[1:n_states]
result$trans <- matrix(
para[(n_states + 1):(n_states^2 + n_states)],
byrow = TRUE, nrow = n_states, ncol = n_states
)
result$emiss <- matrix(
para[((n_states^2 + n_states) + 1):((n_states^2 + n_states + 1) + ((n_states * 2) - 1))],
byrow = TRUE, nrow = n_states, ncol = 2
)
ordre <- order(result$emiss[, 1])
result$emiss <- result$emiss[ordre, ]
result$trans <- result$trans[ordre, ordre]
result$init <- result$init[ordre]
states <- paste0("S", 1:n_states)
fb <- forwardbackward(model)
post_data <- data.frame(fb$gamma)
names(post_data) <- states[ordre]
result$data <- cbind(df, post_data) %>%
mutate(state = apply(post_data, 1, function(x) names(which.max(x))))
# ---- Plotting ---- #
emiss <- data.frame(result$emiss)
names(emiss) <- c("mean", "sd")
emiss$state <- 1:nrow(emiss)
p1 <- plot_emiss(emiss)
print(p1)
links <- melt(result$trans)
names(links) <- c("from", "to", "weight")
nodes <- data.frame(
id = c(1:length(state_name)),
etat = state_name
)
p2 <- plot_trans(links, nodes, emiss)
print(p2)
id <- unique(result$data$id)
p <- list()
nb_indiv <- ifelse(length(id) >= 4, 4, length(id))
for (i in 1:nb_indiv) {
ath <- id[i]
p[[i]] <- grid.arrange(
plot_workload(ath, result$data),
plot_state(ath, result$data, n_states)
)
}
return(
list(
model = model,
data_process = df,
plot = p
)
)
}
mils(agg[c("ID","duration","date_start")])
t=mils(agg[c("ID","duration","date_start")])
t$plot
plot(t$plot)
print(t$plot)
t=mils(agg[c("ID","duration","date_start")])
t=mils(agg[c("ID","date_start","duration")])
t$model
t$model$data
t$data_process
t$model
View(t$model)
View(t$model@posterior)
df=agg[c("ID","date_start","duration")]
df
View(t$model)
df2=cbind(df,t$model@posterior)
df2
df2=result
df2$data$id
#'
#' @param result a dataframe containing workload and state data.
#'
#' @return emils() returns a shiny app.
#'
#' @import shiny
#' @import plotly
#' @importFrom shinyjs hidden show useShinyjs
#' @importFrom shinyWidgets sendSweetAlert
#' @export
emils <- function(result){
#### ---- UI part ---- ####
ui <- tagList(
fluidPage(
useShinyjs(),
my_box(
title = "", width = 12, collapsible = TRUE, closable = FALSE,  maximizable = FALSE,
fluidRow(
column(8,selectizeInput("athlete", "Athlete :" , choices = NULL, multiple = FALSE, options = list(placeholder = "Selectionnez au moins un individu"), width = "100%")),
column(2,div(actionButton("import", "Update"), style = "padding-top: 30px;"))
)
),
hidden(
div(
id = "body",
my_box(
title = "", width = 12, collapsible = TRUE, closable = FALSE,
fluidRow(
plotlyOutput("workload", height = "600px")
)
),
my_box(
title = "", width = 12, collapsible = TRUE, closable = FALSE,
fluidRow(
plotlyOutput("state", height = "600px")
)
)
)
)
)
)
#### ---- SERVER part ---- ####
server <- function(input, output){
## ---- Reactive ---- ##
r <- reactiveValues()
## ---- Update input ---- ##
observe({
indiv <- unique(result$data$id)
updateSelectizeInput(
inputId = "athlete",
choices = indiv,
selected = character(0),
server = TRUE
)
})
## ---- Import data ---- ##
observeEvent(input$import,{
if (length(input$athlete) == 0){
sendSweetAlert(
title = "Aucun(e) athlete selectionne(e)",
text = "Veuillez selectionner au moins un(e) athlete.",
type = "error"
)
} else {
progress <- shiny::Progress$new()
on.exit(progress$close())
progress$set(message = "Importation des donnees", detail = "Patientez un instant...", value = 0.5)
r$data <- result$data %>% filter(id == input$athlete)
shinyjs::show("body")
progress$inc(1, detail = "Termine")
}
})
## ---- Plot ---- ##
output$workload <- renderPlotly({
p <- plot_workload(input$athlete, result$data)
ggplotly(p, tooltip = "text")
})
output$state <- renderPlotly({
p <- plot_state(input$athlete, result$data, length(unique(result$data$state)))
ggplotly(p, tooltip = "text")
})
}
#### ---- Launch the app ---- ####
shinyApp(ui, server)
}
emils(t$model)
?tagList
library(shiny)
emils(t$model)
?useShinyjs
library(shinyjs)
emils(t$model)
?my_box
#' @param width the width of the box (12 by default).
#' @param collapsible boolean. If TRUE, display a button in the upper right that allows the user to collapse the box (TRUE by default).
#' @param maximizable boolean. If TRUE, the card can be displayed in full screen mode (TRUE by default).
#' @param closable boolean.	If TRUE, display a button in the upper right that allows the user to close the box (FALSE by default).
#'
#' @return my_box() returns a HTML object.
#'
#' @importFrom shiny tagList
#' @importFrom bs4Dash box
#' @export
my_box <- function(..., title, width = 12, collapsible = TRUE, maximizable = TRUE, closable = FALSE){
tagList(
bs4Dash::box(..., title = title, width = width, collapsible = collapsible, maximizable = maximizable, closable = closable),
bs4Dash_deps
)
}
emils(t$model)
library(bs4Dash)
emils(t$model)
#' Get bs4Dash dependencies
#'
#' List containing all bs4Dash dependencies.
#'
#' @return bs4Dash_deps is a list of html_dependency.
#'
#' @importFrom htmltools findDependencies
#' @export
bs4Dash_deps <- htmltools::findDependencies(bs4Dash_ui)
#' Import bs4Dash dependencies
#'
#' HMTL object containing all bs4Dash dependencies.
#'
#' @return bs4Dash_ui is a HTML object.
#'
#' @importFrom bs4Dash dashboardPage dashboardHeader dashboardSidebar dashboardBody
#' @export
bs4Dash_ui <- bs4Dash::dashboardPage(
bs4Dash::dashboardHeader(),
bs4Dash::dashboardSidebar(),
bs4Dash::dashboardBody()
)
#' Get bs4Dash dependencies
#'
#' List containing all bs4Dash dependencies.
#'
#' @return bs4Dash_deps is a list of html_dependency.
#'
#' @importFrom htmltools findDependencies
#' @export
bs4Dash_deps <- htmltools::findDependencies(bs4Dash_ui)
emils(t$model)
emils(t)
emils(t$model)
emils(t)
emils(t)
result
result
result$data
emils(result)
#' @import ggplot2
#' @import gridExtra
#' @import reshape2
#' @import stats
#' @import data.table
#' @import igraph
#'
#' @return une liste avec pleins de choses super dedans
#' @export
#' @examples NULL
mils <- function(data, n_obs = 2, n_states = 3, family = "gaussian", init = FALSE, state_name = NULL) {
colnames(data) <- c("id", "date", "load")
# Default state names
if (is.null(state_name)) {
state_name <- paste0("S", 1:n_states)
}
# ---- Data Preprocessing ---- #
data <- add_missing_days(data)
data <- data %>%
mutate(
id = as.character(id),
date = as.Date(date),
load = as.numeric(load)
) %>%
group_by(id, date) %>%
summarise(load = sum(load, na.rm = TRUE), .groups = "keep") %>%
ungroup() %>%
mutate(load = ifelse(load == 0, NA, load)) %>%
arrange(id, date) %>%
mutate(index = row_number()) %>%
relocate(index)
# ---- Feature Initialization ---- #
date <- Day$new()
date$get_data(data)
load <- Load$new()
load$get_data(data)
load$process()
list_features <- list(date, load)
df <- pipeline(list_features)
# Remove athletes with insufficient data
n <- df %>% group_by(id) %>% count()
ath <- n %>% dplyr::filter(n <= n_obs)
if (nrow(ath) > 0) {
df <- df %>% dplyr::filter(!id %in% ath$id)
}
# ---- Model Setup ---- #
n <- df %>% group_by(id) %>% count()
n_times <- n$n
states <- paste0("S", 1:n_states)
set.seed(1)
mod <- depmix(
response = list(load_scaled ~ 1),
data = df,
nstates = n_states,
family = list(get(family)()),
ntimes = n_times
)
if (init) {
mod <- setpars(mod, values = getpars(graal))
}
model <- fit(mod, emc = em.control(maxit = 2000))
print(model)
# ---- Results Extraction ---- #
result <- list()
para <- getpars(model)
result$init <- para[1:n_states]
result$trans <- matrix(
para[(n_states + 1):(n_states^2 + n_states)],
byrow = TRUE, nrow = n_states, ncol = n_states
)
result$emiss <- matrix(
para[((n_states^2 + n_states) + 1):((n_states^2 + n_states + 1) + ((n_states * 2) - 1))],
byrow = TRUE, nrow = n_states, ncol = 2
)
ordre <- order(result$emiss[, 1])
result$emiss <- result$emiss[ordre, ]
result$trans <- result$trans[ordre, ordre]
result$init <- result$init[ordre]
states <- paste0("S", 1:n_states)
fb <- forwardbackward(model)
post_data <- data.frame(fb$gamma)
names(post_data) <- states[ordre]
result$data <- cbind(df, post_data) %>%
mutate(state = apply(post_data, 1, function(x) names(which.max(x))))
# ---- Plotting ---- #
emiss <- data.frame(result$emiss)
names(emiss) <- c("mean", "sd")
emiss$state <- 1:nrow(emiss)
p1 <- plot_emiss(emiss)
print(p1)
links <- melt(result$trans)
names(links) <- c("from", "to", "weight")
nodes <- data.frame(
id = c(1:length(state_name)),
etat = state_name
)
p2 <- plot_trans(links, nodes, emiss)
print(p2)
id <- unique(result$data$id)
p <- list()
nb_indiv <- ifelse(length(id) >= 4, 4, length(id))
for (i in 1:nb_indiv) {
ath <- id[i]
p[[i]] <- grid.arrange(
plot_workload(ath, result$data),
plot_state(ath, result$data, n_states)
)
}
res=cbind(df,model@posterior)
return(
list(
model = model,
data_process = df,
plot = p,
result=res
)
)
}
t=mils(agg[c("id","date_start","duration")])
t=mils(agg[c("ID","date_start","duration")])
emils(t)
#'
#' @param result a dataframe containing workload and state data.
#'
#' @return emils() returns a shiny app.
#'
#' @import shiny
#' @import plotly
#' @importFrom shinyjs hidden show useShinyjs
#' @importFrom shinyWidgets sendSweetAlert
#' @export
emils <- function(result){
#### ---- UI part ---- ####
ui <- tagList(
fluidPage(
useShinyjs(),
my_box(
title = "", width = 12, collapsible = TRUE, closable = FALSE,  maximizable = FALSE,
fluidRow(
column(8,selectizeInput("athlete", "Athlete :" , choices = NULL, multiple = FALSE, options = list(placeholder = "Selectionnez au moins un individu"), width = "100%")),
column(2,div(actionButton("import", "Update"), style = "padding-top: 30px;"))
)
),
hidden(
div(
id = "body",
my_box(
title = "", width = 12, collapsible = TRUE, closable = FALSE,
fluidRow(
plotlyOutput("workload", height = "600px")
)
),
my_box(
title = "", width = 12, collapsible = TRUE, closable = FALSE,
fluidRow(
plotlyOutput("state", height = "600px")
)
)
)
)
)
)
#### ---- SERVER part ---- ####
server <- function(input, output){
## ---- Reactive ---- ##
r <- reactiveValues()
## ---- Update input ---- ##
observe({
indiv <- unique(result$result$id)
updateSelectizeInput(
inputId = "athlete",
choices = indiv,
selected = character(0),
server = TRUE
)
})
## ---- Import data ---- ##
observeEvent(input$import,{
if (length(input$athlete) == 0){
sendSweetAlert(
title = "Aucun(e) athlete selectionne(e)",
text = "Veuillez selectionner au moins un(e) athlete.",
type = "error"
)
} else {
progress <- shiny::Progress$new()
on.exit(progress$close())
progress$set(message = "Importation des donnees", detail = "Patientez un instant...", value = 0.5)
r$data <- result$result %>% filter(id == input$athlete)
shinyjs::show("body")
progress$inc(1, detail = "Termine")
}
})
## ---- Plot ---- ##
output$workload <- renderPlotly({
p <- plot_workload(input$athlete, result$result)
ggplotly(p, tooltip = "text")
})
output$state <- renderPlotly({
p <- plot_state(input$athlete, result$result, length(unique(result$result$state)))
ggplotly(p, tooltip = "text")
})
}
#### ---- Launch the app ---- ####
shinyApp(ui, server)
}
emils(t)
