tab[paste0("redi2_",indic)]=NA
for (i in 1:length(indic)){
tab[1,paste0("redi1_",indic[i])]=tab[1,indic[i]]
tab[1,paste0("redi2_",indic[i])]=tab[1,indic[i]]
}
for (i in 1:length(indic)){
tab[paste0(indic[i],"2")]=tab[paste0(indic[i])]
tab[paste0(indic[i],"2")][is.na(tab[paste0(indic[i],"2")])]=0
}
tab$IM=NA
tab$contrainte=NA
if(nrow(tab)>1){
for (i in 2:nrow(tab)){
tab[i,paste0("ewma1_",indic)]=sapply(indic,function(x){
(tab[,x][i]*(2/(N1+1)))+((1-(2/(N1+1)))*tab[i-1,paste0("ewma1_",x)])
})
tab[i,paste0("ewma2_",indic)]=sapply(indic,function(x){
(tab[,x][i]*(2/(N2+1)))+((1-(2/(N2+1)))*tab[i-1,paste0("ewma2_",x)])
})
##Calcul REDI
if(replace==F){
indicateur=indic
}else{
if(replace==T){
indicateur=paste0(indic,"2")
}
}
temp=tab[1:i,][indicateur]
for (z in 1:length(indicateur)){
temp2=temp[,indicateur[z]]
alpha1=c()
alpha2=c()
for (j in 1:length(temp2)){
alpha1[j]=exp(- lambda1 * j)
}
for (j in 1:length(temp2)){
alpha2[j]=exp(- lambda2 * j)
}
alpha1=rev(alpha1)
alpha2=rev(alpha2)
alpha1[is.na(temp2)]=0
alpha2[is.na(temp2)]=0
temp2[is.na(temp2)]=0
S1=sum(alpha1*temp2)
S2=sum(alpha1)
tab[i,paste0("redi1_",indic[z])]=S1/S2
S1=sum(alpha2*temp2)
S2=sum(alpha2)
tab[i,paste0("redi2_",indic[z])]=S1/S2
}
if(FOSTER==T){
if(i>=7){
tab$IM[i]=mean(tab[,paste0(rpeload,"2")][c(i:(i-6))])/sd(tab[,paste0(rpeload,"2")][c(i:(i-6))])
tab$contrainte[i]=mean(tab[,paste0(rpeload,"2")][c(i:(i-6))])*tab$IM[i]
}
}
}
}
if(FOSTER==T){
# tab$fitness=tab[,paste0(rpeload,"2")]-tab$contrainte
tab$fitness=tab[,paste0("redi2_",rpeload)]-tab$contrainte
}
for (i in 1:length(indic)){
tab[,paste0("ratioredi_",indic[i])]=tab[,paste0("redi2_",indic[i])]/tab[,paste0("redi1_",indic[i])]
}
for (i in 1:length(indic)){
tab[,paste0("ratioewma_",indic[i])]=tab[,paste0("ewma1_",indic[i])]/tab[,paste0("redi2_",indic[i])]
}
tab$ACWR=NA
# if(nrow(tab)>28){
#   for (i in 28:nrow(tab)){
#     tab$ACWR[i]=mean(tab$rpeLoad[c(i:(i-7))])/mean(tab$rpeLoad[c(i:(i-28))])
#   }}
return(tab)
}
}
setwd("/home/qdelarochelambert/OneDrive - INSEP/aviron/compterenduJO/blessures")
Unaccent <- function(text) {
text <- gsub("['`^~\"]", " ", text)
text <- iconv(text, to="ASCII//TRANSLIT//IGNORE")
text <- gsub("['`^~\"]", "", text)
return(text)
}
## Fichier blessures ##
blessures=read_excel("20240910_Bilan_blessures_maladies.xlsx")
blessures$nomprenom=Unaccent(tolower(paste0(blessures$Nom,blessures$Prénom)))
blessures$tempsarret=difftime(blessures$`Date de fin`,blessures$`Date de début`,units = "days")
blessures$`B / M`[which(blessures$`B / M`=="B")]="Blessure"
blessures$`B / M`[which(blessures$`B / M`=="M")]="Maladie"
tab_cor <- read_sheet('https://docs.google.com/spreadsheets/d/1-cIoFhEwcfJ9t7z2B4zGFRrjtdSmnGecym3NOJPCmkY/edit?gid=0#gid=0')
## Nolio ##
jour=unique(as.character(as.Date(blessures$`Date de début`[which(!is.na(blessures$`Date de début`))])))
con <- dbConnect(odbc::odbc(), .connection_string = "Driver={ODBC Driver 17 for SQL Server};",
timeout = 10, Server = "SHN-SQL3.infoshn.fr", Database = "DWH",
UID = "ffaviron", PWD = "K1PLJAaOpzsMZ7WV2WzIxQtt8VCsB0TE")
query=paste0("SELECT personne_nom, personne_prenom,metadata, id_personne,CAST(dt_session AS DATE) AS Date
FROM DWH.Externe.fact_sessions
WHERE type_session='Nolio' AND CAST(dt_session AS DATE) > '",min(jour),"'")
df=dbGetQuery(con,query)
query=paste0("SELECT fre.competition_en , fre.epreuve, fre.date_debut_edition, frea.id_personne
FROM Resultats.fact_resultats_epreuves fre
LEFT JOIN Resultats.fact_resultats_epreuves_athletes frea ON fre.id_resultat = frea.id_resultat
WHERE frea.id_personne IN ('",paste0(unique(df$id_personne),collapse="','"),"')")
dfresultat=dbGetQuery(con,query)
dbDisconnect(con)
df$Date=as.character(df$Date)
dfresultat$date_debut_edition=as.character(dfresultat$date_debut_edition)
temp=data.frame(rbindlist(lapply(df$metadata,function(x){
return(data.frame(t(as.matrix(fromJSON(x)))))
}),fill=T))
temp=temp %>% select(-c(zones,planned_name,planned_sport,planned_sport_id,planned_description,planned_load_coggan))
df=cbind(df,temp)
df$sport2=NA
df$sport2=tab_cor$`Name FFA`[match(paste(df$sport,df$name),paste(tab_cor$Sport,tab_cor$Name))]
df$rpe[which(df$rpe==0)]=NA
df=df %>%
select(-c(kilojoules,avg_watt,max_watt))
var=names(df)
for (i in 1:length(var)){
df[,var[i]]=unlist(df[,var[i]])
}
# df=merge(df,dfresultat,by.y=c("id_personne","date_debut_edition"),by.x=c("id_personne","Date"),all = T)
df=df[which(df$date_start<="2024-08-03"),]
# t=aggregate(duration~personne_nom+personne_prenom+id_personne,data=df,FUN=sum)
t=aggregate(cbind(duration)~date_start+sport2+personne_nom+personne_prenom+id_personne,data=df,FUN=sum)
t=t[which(t$sport2!="NA"),]
t$date_start=as.Date(t$date_start)
t$nomprenom=Unaccent(tolower(paste0(t$personne_nom,t$personne_prenom)))
t$nomprenom[which(t$nomprenom=="cornut danjoumaya")]="cornutmaya"
t$nomprenom2=Unaccent(paste(t$personne_nom,t$personne_prenom))
# t$sport2=t$sport
# t$sport2[which(!t$sport%in%c("Aviron","Aviron indoor","Renforcement musculaire","Musculation"))]="Autre"
# t$sport2[which(t$sport2=="Renforcement musculaire")]="Musculation"
t$blessure=NA
t$Pathologie=blessures$Pathologie[match(paste(t$nomprenom,t$date_start),paste(blessures$nomprenom,blessures$`Date de début`))]
t$type=blessures$`B / M`[match(paste(t$nomprenom,t$date_start),paste(blessures$nomprenom,blessures$`Date de début`))]
t$Commentaire=blessures$Commentaire[match(paste(t$nomprenom,t$date_start),paste(blessures$nomprenom,blessures$`Date de début`))]
t$tempsarret=as.numeric(blessures$tempsarret[match(paste(t$nomprenom,t$date_start),paste(blessures$nomprenom,blessures$`Date de début`))])
t$duration=t$duration/60
# t$rpesession=t$duration*t$rpe
agg=aggregate(duration~date_start+nomprenom+nomprenom2+id_personne,data=t,FUN=sum)
agg=data.frame(rbindlist(by(agg,agg$nomprenom,function(x){
date_range <- seq(min(x$date_start), max(x$date_start), by = "day")
df_complet <- merge(data.frame(date_start = date_range), x, by = "date_start", all.x = TRUE)
df_complet$duration[is.na(df_complet$duration)] <- 0
df_complet$nomprenom=unique(x$nomprenom)
df_complet$nomprenom2=unique(x$nomprenom2)
df_complet$id_personne=unique(x$id_personne)
return(df_complet)
})))
# Fonction pour calculer REDI
calculer_redi <- function(W, lambda) {
N <- length(W) - 1  # Nombre de jours (indexés à partir de 0)
# Calculer alpha_j^lambda pour chaque jour
alpha <- sapply(0:N, function(j) {
if (is.na(W[j + 1])) {
return(0)  # W_j manquant
} else {
return(exp(-lambda * j))  # alpha_j^lambda = exp(-lambda * j)
}
})
# Calculer le REDI
if (sum(alpha) == 0) {
return(NA)  # Gestion des cas où toutes les données sont manquantes
} else {
redi <- sum(alpha * W, na.rm = TRUE) / sum(alpha)
return(redi)
}
}
library(questionr)
agg=data.frame(rbindlist(by(agg,agg$nomprenom,function(x){
print(unique(x$nomprenom))
# dfredit=x[c("date_start","duration")]
# names(dfredit)=c("Input","Output")
# x$redi=loop_redi(dfredit,coef=N)$REDI
names(x)=c("Date","Athlete","Athlete2","id_personne","duration")
red=redi2(x,indic=c("duration"),fun="sum",formatdate = c("%Y-%m-%d"))
red$Athlete2=unique(x$Athlete2)
red$id_personne=unique(x$id_personne)
return(red)
})))
agg=rename.variable(agg,"nom","nomprenom")
agg=rename.variable(agg,"jour","date_start")
agg$blessure=NA
agg$Pathologie=blessures$Pathologie[match(paste(agg$nomprenom,agg$date_start),paste(blessures$nomprenom,blessures$`Date de début`))]
agg$type=blessures$`B / M`[match(paste(agg$nomprenom,agg$date_start),paste(blessures$nomprenom,blessures$`Date de début`))]
agg$Commentaire=blessures$Commentaire[match(paste(agg$nomprenom,agg$date_start),paste(blessures$nomprenom,blessures$`Date de début`))]
agg$tempsarret=as.numeric(blessures$tempsarret[match(paste(agg$nomprenom,agg$date_start),paste(blessures$nomprenom,blessures$`Date de début`))])
agg$ACWR=agg$redi1_duration/agg$redi2_duration
aggsport=list()
sport=unique(t$sport)
for (i in 1:length(sport)){
aggtemp=aggregate(duration~date_start+nomprenom+nomprenom2+id_personne,data=t[which(t$sport==sport[i]),],FUN=sum)
aggtemp=data.frame(rbindlist(by(aggtemp,aggtemp$nomprenom,function(x){
date_range <- seq(min(x$date_start), max(x$date_start), by = "day")
df_complet <- merge(data.frame(date_start = date_range), x, by = "date_start", all.x = TRUE)
df_complet$duration[is.na(df_complet$duration)] <- 0
df_complet$nomprenom=unique(x$nomprenom)
df_complet$nomprenom2=unique(x$nomprenom2)
df_complet$id_personne=unique(x$id_personne)
return(df_complet)
})))
aggtemp=data.frame(rbindlist(by(aggtemp,aggtemp$nomprenom,function(x){
names(x)=c("Date","Athlete","Athlete2","id_personne","duration")
red=redi2(x,indic="duration",fun="sum",formatdate = c("%Y-%m-%d"))
red$Athlete2=unique(x$Athlete2)
red$id_personne=unique(x$id_personne)
return(red)
})))
aggtemp=rename.variable(aggtemp,"nom","nomprenom")
aggtemp=rename.variable(aggtemp,"jour","date_start")
aggtemp$blessure=NA
aggtemp$Pathologie=blessures$Pathologie[match(paste(aggtemp$nomprenom,aggtemp$date_start),paste(blessures$nomprenom,blessures$`Date de début`))]
aggtemp$type=blessures$`B / M`[match(paste(aggtemp$nomprenom,aggtemp$date_start),paste(blessures$nomprenom,blessures$`Date de début`))]
aggtemp$tempsarret=as.numeric(blessures$tempsarret[match(paste(aggtemp$nomprenom,aggtemp$date_start),paste(blessures$nomprenom,blessures$`Date de début`))])
aggtemp$ACWR=aggtemp$redi1_duration/aggtemp$redi2_duration
aggsport[[sport[i]]]=aggtemp
}
blessures=data.frame(blessures)
```
data=agg[c("ID","date_start","duration")]
data
# Default state names
if (is.null(state_name)) {
state_name <- paste0("S", 1:n_states)
}
# Default state names
if (is.null(state_name)) {
state_name <- paste0("S", 1:n_states)
}
state_name
state_name = NULL
init = FALSE
family = "gaussian"
n_states = 3
n_obs = 2
# Default state names
if (is.null(state_name)) {
state_name <- paste0("S", 1:n_states)
}
# ---- Data Preprocessing ---- #
colnames(data) <- c("id", "date", "load")
data <- add_missing_days(data)
data <- data %>%
mutate(
id = as.character(id),
date = as.Date(date),
load = as.numeric(load)
) %>%
group_by(id, date) %>%
summarise(load = sum(load, na.rm = TRUE), .groups = "keep") %>%
ungroup() %>%
mutate(load = ifelse(load == 0, NA, load)) %>%
arrange(id, date) %>%
mutate(index = row_number()) %>%
relocate(index)
# ---- Feature Initialization ---- #
date <- Day$new()
date$get_data(data)
load <- Load$new()
load$get_data(data)
load$process()
list_features <- list(date, load)
df <- pipeline(list_features)
# Remove athletes with insufficient data
n <- df %>% group_by(id) %>% count()
ath <- n %>% filter(n <= n_obs)
if (nrow(ath) > 0) {
df <- df %>% filter(!id %in% ath$id)
}
# ---- Model Setup ---- #
n <- df %>% group_by(id) %>% count()
n_times <- n$n
states <- paste0("S", 1:n_states)
set.seed(1)
mod <- depmix(
response = list(load_scaled ~ 1),
data = df,
nstates = n_states,
family = list(get(family)()),
ntimes = n_times
)
if (init) {
mod <- setpars(mod, values = getpars(graal))
}
model <- fit(mod, emc = em.control(maxit = 2000))
print(model)
# ---- Results Extraction ---- #
result <- list()
para <- getpars(model)
result$init <- para[1:n_states]
result$trans <- matrix(
para[(n_states + 1):(n_states^2 + n_states)],
byrow = TRUE, nrow = n_states, ncol = n_states
)
result$emiss <- matrix(
para[((n_states^2 + n_states) + 1):((n_states^2 + n_states + 1) + ((n_states * 2) - 1))],
byrow = TRUE, nrow = n_states, ncol = 2
)
ordre <- order(result$emiss[, 1])
result$emiss <- result$emiss[ordre, ]
result$trans <- result$trans[ordre, ordre]
result$init <- result$init[ordre]
states <- paste0("S", 1:n_states)
fb <- forwardbackward(model)
post_data <- data.frame(fb$gamma)
names(post_data) <- states[ordre]
result$data <- cbind(df, post_data) %>%
mutate(state = apply(post_data, 1, function(x) names(which.max(x))))
# ---- Plotting ---- #
emiss <- data.frame(result$emiss)
names(emiss) <- c("mean", "sd")
emiss$state <- 1:nrow(emiss)
p1 <- plot_emiss(emiss)
print(p1)
links <- melt(result$trans)
names(links) <- c("from", "to", "weight")
nodes <- data.frame(
id = state_name,
etat = state_name
)
p2 <- plot_trans(links, nodes, emiss)
id <- unique(result$data$id)
p <- list()
nb_indiv <- ifelse(length(id) >= 4, 4, length(id))
for (i in 1:nb_indiv) {
ath <- id[i]
p[[i]] <- grid.arrange(
plot_workload(ath, result$data),
plot_state(ath, result$data, n_states)
)
}
#' @examples NULL
#' @import ggplot2
#' @import gridExtra
#' @import reshape2
#' @import stats
#' @import data.table
#' @import igraph
#'
#' @return une liste avec pleins de choses super dedans
#' @export
#' @examples NULL
mils <- function(data, n_obs = 2, n_states = 3, family = "gaussian", init = FALSE, state_name = NULL) {
# Default state names
if (is.null(state_name)) {
state_name <- paste0("S", 1:n_states)
}
# ---- Data Preprocessing ---- #
colnames(data) <- c("id", "date", "load")
data <- add_missing_days(data)
data <- data %>%
mutate(
id = as.character(id),
date = as.Date(date),
load = as.numeric(load)
) %>%
group_by(id, date) %>%
summarise(load = sum(load, na.rm = TRUE), .groups = "keep") %>%
ungroup() %>%
mutate(load = ifelse(load == 0, NA, load)) %>%
arrange(id, date) %>%
mutate(index = row_number()) %>%
relocate(index)
# ---- Feature Initialization ---- #
date <- Day$new()
date$get_data(data)
load <- Load$new()
load$get_data(data)
load$process()
list_features <- list(date, load)
df <- pipeline(list_features)
# Remove athletes with insufficient data
n <- df %>% group_by(id) %>% count()
ath <- n %>% filter(n <= n_obs)
if (nrow(ath) > 0) {
df <- df %>% filter(!id %in% ath$id)
}
# ---- Model Setup ---- #
n <- df %>% group_by(id) %>% count()
n_times <- n$n
states <- paste0("S", 1:n_states)
set.seed(1)
mod <- depmix(
response = list(load_scaled ~ 1),
data = df,
nstates = n_states,
family = list(get(family)()),
ntimes = n_times
)
if (init) {
mod <- setpars(mod, values = getpars(graal))
}
model <- fit(mod, emc = em.control(maxit = 2000))
print(model)
# ---- Results Extraction ---- #
result <- list()
para <- getpars(model)
result$init <- para[1:n_states]
result$trans <- matrix(
para[(n_states + 1):(n_states^2 + n_states)],
byrow = TRUE, nrow = n_states, ncol = n_states
)
result$emiss <- matrix(
para[((n_states^2 + n_states) + 1):((n_states^2 + n_states + 1) + ((n_states * 2) - 1))],
byrow = TRUE, nrow = n_states, ncol = 2
)
ordre <- order(result$emiss[, 1])
result$emiss <- result$emiss[ordre, ]
result$trans <- result$trans[ordre, ordre]
result$init <- result$init[ordre]
states <- paste0("S", 1:n_states)
fb <- forwardbackward(model)
post_data <- data.frame(fb$gamma)
names(post_data) <- states[ordre]
result$data <- cbind(df, post_data) %>%
mutate(state = apply(post_data, 1, function(x) names(which.max(x))))
# ---- Plotting ---- #
emiss <- data.frame(result$emiss)
names(emiss) <- c("mean", "sd")
emiss$state <- 1:nrow(emiss)
p1 <- plot_emiss(emiss)
print(p1)
links <- melt(result$trans)
names(links) <- c("from", "to", "weight")
nodes <- data.frame(
id = state_name,
etat = state_name
)
p2 <- plot_trans(links, nodes, emiss)
print(p2)
id <- unique(result$data$id)
p <- list()
nb_indiv <- ifelse(length(id) >= 4, 4, length(id))
for (i in 1:nb_indiv) {
ath <- id[i]
p[[i]] <- grid.arrange(
plot_workload(ath, result$data),
plot_state(ath, result$data, n_states)
)
}
return(
list(
model = model,
data_process = df,
plot = p
)
)
}
mils(agg[c("ID","date_start","duration")])
n_obs
# Default state names
if (is.null(state_name)) {
state_name <- paste0("S", 1:n_states)
}
# ---- Data Preprocessing ---- #
colnames(data) <- c("id", "date", "load")
# Default state names
if (is.null(state_name)) {
state_name <- paste0("S", 1:n_states)
}
# ---- Data Preprocessing ---- #
colnames(data) <- c("id", "date", "load")
data <- add_missing_days(data)
data <- data %>%
mutate(
id = as.character(id),
date = as.Date(date),
load = as.numeric(load)
) %>%
group_by(id, date) %>%
summarise(load = sum(load, na.rm = TRUE), .groups = "keep") %>%
ungroup() %>%
mutate(load = ifelse(load == 0, NA, load)) %>%
arrange(id, date) %>%
mutate(index = row_number()) %>%
relocate(index)
data=agg[c("ID","duration","date")]
head(agg)
data=agg[c("ID","duration","date_start")]
# Default state names
if (is.null(state_name)) {
state_name <- paste0("S", 1:n_states)
}
# ---- Data Preprocessing ---- #
colnames(data) <- c("id", "date", "load")
data <- add_missing_days(data)
data <- data %>%
mutate(
id = as.character(id),
date = as.Date(date),
load = as.numeric(load)
) %>%
group_by(id, date) %>%
summarise(load = sum(load, na.rm = TRUE), .groups = "keep") %>%
ungroup() %>%
mutate(load = ifelse(load == 0, NA, load)) %>%
arrange(id, date) %>%
mutate(index = row_number()) %>%
relocate(index)
# ---- Feature Initialization ---- #
date <- Day$new()
date$get_data(data)
load <- Load$new()
load$get_data(data)
load$process()
list_features <- list(date, load)
df <- pipeline(list_features)
# Remove athletes with insufficient data
n <- df %>% group_by(id) %>% count()
n_obs
n
